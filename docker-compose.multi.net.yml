version: '3'

services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /home/brent/srcnode/App13319/certs:/etc/nginx/certs
    depends_on:
      - react13319
      - feat13319
    networks:
      - frontend
      # nginx must communicate with php-fpm from the backend network
      - backend

  react13319:
    image: brentgroves/react13319:1.0.0
    build:
      context: ../React13319
    depends_on:
      - feat13319
    container_name: react13319
    restart: unless-stopped
    env_file: .env
    environment:
      # - NODE_ENV=$NODE_ENV
      - VIRTUAL_HOST=$WEBAPP_HOST
        # Development port = 3000
        # Production port = 5000
      # - VIRTUAL_PORT=3000
      - VIRTUAL_PORT=5000
    networks:
      - frontend
    stdin_open: true  
    volumes:
      # Sets the image and containers timezone to that of the host system
      - /etc/localtime:/etc/localtime:ro
      # must be absolute path
      - /home/brent/srcnode/App13319/React13319:/usr/src/app
      - react_node_modules:/usr/src/app/node_modules      
    # Wait for mqtt2 and mysql to start before running this app
    # https://stackoverflow.com/questions/40454470/how-can-i-use-a-variable-inside-a-dockerfile-cmd
    # command: sh -c "dockerize -wait tcp://feat13319:3030 npm start"
    # command: sh -c "dockerize -wait tcp://feat13319:3030 http-server ./build --cors -p 5000"
    command: sh -c "$REACT_CMD"
    # command: sh -c "dockerize -wait tcp://feat13319:3030 $REACT_CMD"

  feat13319:
    image: brentgroves/feat13319:1.0.0
    build:
      context: ../Feat13319
    depends_on:
      - db
      - mqtt2      
    container_name: feat13319
    restart: unless-stopped
    env_file: .env
    environment:
      - MQTT_SERVER=mqtt2
      - KORS_USERNAME=$KORS_USERNAME
      - KORS_PASSWORD=$KORS_PASSWORD
      - KORS_DATABASE=$KORS_DATABASE
      - KORS_SERVER=$KORS_SERVER
      - MSSQL_USER=$MSSQL_USER
      - MSSQL_PASSWORD=$MSSQL_PASSWORD
      - MSSQL_DATABASE=$MSSQL_DATABASE
      - MSSQL_SERVER=$MSSQL_SERVER
      - FEATHERS_PORT=$FEATHERS_PORT
      - MQTT_PORT=$MQTT_PORT
      - MYSQL_HOSTNAME=db
      - MYSQL_PORT=$MYSQL_PORT 
      - MYSQL_USERNAME=$MYSQL_USERNAME
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - VIRTUAL_HOST=$WEBSERVICE_HOST
      - VIRTUAL_PORT=3030

    networks:
      - backend
    stdin_open: true  
    volumes:
      # Sets the image and containers timezone to that of the host system
      - /etc/localtime:/etc/localtime:ro
      # must be absolute path
      - /home/brent/srcnode/App13319/Feat13319:/usr/src/app
      - feat_node_modules:/usr/src/app/node_modules      
      # Wait for mqtt2 and mysql to start before running this app
    command: sh -c "dockerize -wait tcp://db:3306 -wait tcp://mqtt2:1883 npm start"
  
  tracker13319:
    image: brentgroves/tracker13319:1.0.0
    build:
      context: ../Tracker13319
    depends_on:
      - db
      - mqtt2      
    container_name: tracker13319
    restart: unless-stopped
    env_file: .env
    environment:
      - MQTT_SERVER=mqtt2
      - MQTT_PORT=$MQTT_PORT
      - MYSQL_HOSTNAME=db
      - MYSQL_PORT=$MYSQL_PORT 
      - MYSQL_USERNAME=$MYSQL_USERNAME
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_DATABASE=$MYSQL_DATABASE
    networks:
      - backend
    stdin_open: true  
    volumes:
      # Sets the image and containers timezone to that of the host system
      - /etc/localtime:/etc/localtime:ro
      # must be absolute path
      - /home/brent/srcnode/App13319/Tracker13319:/usr/src/app
      - tracker_node_modules:/usr/src/app/node_modules      
      # Wait for mqtt2 and mysql to start before running this app
    command: sh -c "dockerize -wait tcp://db:3306 -wait tcp://mqtt2:1883 node app.js"


  udp13319:
    image: brentgroves/udp13319:1.0.0
    build:
      context: ../UDP13319
    depends_on:
      # The database needs to by up before we can insert datagrams
      - db
      - mqtt2      
    container_name: udp13319
    restart: unless-stopped
    env_file: .env
    environment:
      - MQTT_SERVER=mqtt2
      - MQTT_PORT=$MQTT_PORT
      - UDP_PORT=$UDP_PORT
      - MYSQL_HOSTNAME=db
      - MYSQL_PORT=$MYSQL_PORT 
      - MYSQL_USERNAME=$MYSQL_USERNAME
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_DATABASE=$MYSQL_DATABASE

    networks:
      - backend
    stdin_open: true  
    ports:
      - "2222:2222/udp"
    volumes:
        # Sets the image and containers timezone to that of the host system
      - /etc/localtime:/etc/localtime:ro
      # must be absolute path
      - /home/brent/srcnode/App13319/UDP13319:/usr/src/app
      - udp_node_modules:/usr/src/app/node_modules      
    # working_dir: /usr/src/app     
    # Wait for mysql to start before running this app
    # command: ["/wait-for-it.sh", "db:3306", "--", "node","app.js"]
    
    command: sh -c "dockerize -wait tcp://db:3306 -wait tcp://mqtt2:1883 node app.js"
  db:
    image: mysql:8.0.19
    container_name: db
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - MYSQL_ROOT_PASSWORD=$MYSQL_PASSWORD
    networks:
      - backend
    ports:
      # This assumes a sql server is already running on the production server
      # This allows connection to it from the host using dbeaver
      # Should stop the host Mysql from booting at start up for better performance
      - "3305:3306"
    volumes:
      # Sets the image and containers timezone to that of the host system
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/volumes/mysql:/var/lib/mysql
      - /etc/volumes/mysql/conf.d:/etc/mysql/conf.d       

  mqtt2:
    image: eclipse-mosquitto:1.6.10
    container_name: mqtt2
    restart: unless-stopped
    networks:
      - backend
    ports:
      # If host has a mosquitto server running we need to map to an alternate port
      # sudo ss -tulwn | grep LISTEN
      - "1882:1883"
    volumes:
      - /etc/volumes/mosquitto:/mosquitto


networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  udp_node_modules:
  tracker_node_modules:
  feat_node_modules:
  react_node_modules:
